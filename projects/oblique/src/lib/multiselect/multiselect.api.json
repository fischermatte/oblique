{
  "$schema": "../../../schema.json",
  "api": [
    {
      "name": "ObMultiselectComponent",
      "selector": "ob-multiselect",
      "exported": "obMultiselect",
      "type": "component",
      "since": "2.0.0",
      "updated": "6.1.0",
      "inputs": [
        {
          "name": "options",
          "text": "All options for the dropdown.",
          "type": "any",
          "since": "2.0.0"
        },
        {
          "name": "idPrefix",
          "text": "The unique <code>id</code> that will be applied to the component's actionable part. It will also be used as a prefix <code>id</code> for its underlying elements.",
          "type": "string",
          "default": "multiselect",
          "since": "4.0.0"
        },
        {
          "name": "texts",
          "text": "Custom texts for only this instance. These texts will be merged with the global <code>ObMultiselectTexts</code>",
          "type": "ObMultiselectTexts",
          "default": "ObMultiselectTexts",
          "since": "2.0.0"
        },
        {
          "name": "dropup",
          "text": "Whether it should dropup.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        },
        {
          "name": "labelProperty",
          "text": "If the model is an object, this property will be used to display both the available and selected options. The <code>labelFormatter</code> takes precedence over <code>labelProperty</code>.",
          "type": "string",
          "default": "",
          "since": "2.0.0"
        },
        {
          "name": "labelFormatter",
          "text": "If the model is an object, this function will be used to format both the available and selected options. The <code>labelFormatter</code> takes precedence over <code>labelProperty</code>.",
          "type": "(option: any) => string",
          "since": "2.0.0"
        },
        {
          "name": "titleProperty",
          "text": "If the model is an object, this property will be used to display the selected options. The <code>titleFormatter</code> takes precedence over <code>titleProperty</code>, but <code>titleProperty</code> takes precedence over both <code>labelProperty</code> and <code>labelFormatter</code>.",
          "type": "string",
          "default": "",
          "since": "4.1.0"
        },
        {
          "name": "titleFormatter",
          "text": "If the model is an object, this function will be used to format the selected options. The <code>titleFormatter</code> takes precedence over <code>titleProperty</code>, but <code>titleProperty</code> takes precedence over both <code>labelProperty</code> and <code>labelFormatter</code>.",
          "type": "(option: any) => string",
          "since": "2.0.0"
        },
        {
          "name": "enableAllSelectedText",
          "text": "Whether to use the <code>allSelectedText</code> or just the checked text. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": true,
          "since": "2.0.0"
        },
        {
          "name": "dynamicTitleMaxItems",
          "text": "Max amount of selected items for which a dynamic title will be generated. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "number",
          "default": 3,
          "since": "2.0.0"
        },
        {
          "name": "enableSearch",
          "text": "Whether to display the search field. Initialized from <code>ObMultiselectConfig</code> service. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        },
        {
          "name": "maxHeight",
          "text": "May height of the dropdown. Initialized from <code>ObMultiselectConfig</code> service. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "string",
          "default": "300px",
          "since": "2.0.0"
        },
        {
          "name": "selectionLimit",
          "text": "Max amount of selectable options. If set to <code>0</code> no max amount will be checked. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "number",
          "default": 0,
          "since": "2.0.0"
        },
        {
          "name": "showCheckAll",
          "text": "Whether checkAll should be shown.. Initialized from <code>ObMultiselectConfig</code> service. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        },
        {
          "name": "showUncheckAll",
          "text": "Whether uncheckAll should be shown.. Initialized from <code>ObMultiselectConfig</code> service. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        }
      ],
      "outputs": [
        {
          "name": "selectionLimitReached",
          "text": "Emits when the selection limit is reached. Event's payload equals to the model length.",
          "type": "Observable<number>",
          "since": "2.0.0"
        },
        {
          "name": "dropdownClosed",
          "text": "Emits when the dropdown gets closed.",
          "type": "Observable<void>",
          "since": "2.0.0"
        },
        {
          "name": "onAdded",
          "text": "Emits whenan option gets selected. Event's payload equals the selected option.",
          "type": "Observable<any>",
          "since": "2.0.0"
        },
        {
          "name": "onRemoved",
          "text": "Emits whenan option gets unselected. event's payload equals the unselected option.",
          "type": "Observable<void>",
          "since": "2.0.0"
        }
      ]
    },
    {
      "name": "ObMultiselectConfig",
      "usage": "Should by injected, typically in the <code>AppModule</code>, to customize the values of its properties in order to provide alternate default values for all the <code>MultiselectComponent</code> instances.",
      "type": "injectable(config)",
      "since": "2.0.0",
      "variables": [
        {
          "name": "enableAllSelectedText",
          "text": "Whether to use the <code>allSelectedText</code> or just the checked text.",
          "type": "boolean",
          "default": true,
          "since": "2.0.0"
        },
        {
          "name": "dynamicTitleMaxItems",
          "text": "Max amount of selected items for which a dynamic title will be generated.",
          "type": "number",
          "default": 3,
          "since": "2.0.0"
        },
        {
          "name": "enableSearch",
          "text": "Whether to display the search field. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        },
        {
          "name": "maxHeight",
          "text": "May height of the dropdown. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "string",
          "default": "300px",
          "since": "2.0.0"
        },
        {
          "name": "selectionLimit",
          "text": "Max amount of selectable options. If set to <code>0</code> no max amount will be checked.",
          "type": "number",
          "default": 0,
          "since": "2.0.0"
        },
        {
          "name": "showCheckAll",
          "text": "Whether checkAll should be shown.. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        },
        {
          "name": "showUncheckAll",
          "text": "Whether uncheckAll should be shown.. Initialized from <code>ObMultiselectConfig</code> service.",
          "type": "boolean",
          "default": false,
          "since": "2.0.0"
        }
      ]
    },
    {
      "name": "ObMultiselectTexts",
      "usage": "This is the default configuration object for the texts of all <code>MultiselectComponent</code> instances. The values can be normal strings or ngx-translate keys.",
      "type": "injectable(config)",
      "since": "2.0.0",
      "updated": "9.0.0",
      "variables": [
        {
          "name": "checkAll",
          "text": "The label for the check all option.",
          "type": "string",
          "default": "i18n.oblique.multiselect.check-all",
          "since": "2.0.0",
          "updated": "9.0.0"
        },
        {
          "name": "uncheckAll",
          "text": "The label for the uncheck all option.",
          "type": "string",
          "default": "i18n.oblique.multiselect.uncheck-all",
          "since": "2.0.0",
          "updated": "9.0.0"
        },
        {
          "name": "searchPlaceholder",
          "text": "The placeholder",
          "type": "string",
          "default": "i18n.oblique.multiselect.search-placeholder",
          "since": "2.0.0",
          "updated": "9.0.0"
        },
        {
          "name": "checked",
          "text": "The label for the checked option.",
          "type": "string",
          "default": "i18n.oblique.multiselect.checked",
          "since": "2.0.0",
          "updated": "9.0.0"
        },
        {
          "name": "defaultTitle",
          "text": "The default title.",
          "type": "string",
          "default": "i18n.oblique.multiselect.default-title",
          "since": "2.0.0",
          "updated": "9.0.0"
        },
        {
          "name": "allSelected",
          "text": "The label that shows when all elements have been selected.",
          "type": "string",
          "default": "i18n.oblique.multiselect.all-selected",
          "since": "2.0.0",
          "updated": "9.0.0"
        }
      ]
    }
  ]
}
