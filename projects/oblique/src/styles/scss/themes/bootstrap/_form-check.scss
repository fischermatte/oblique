@use "~@fortawesome/fontawesome-free/scss/variables" as scss-variables;
@use "../../core/variables" as core-variables;
@use "../bootstrap/variables" as ob-bootstrap-variables;
@use "mixins/form-check";
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";

$size: 1.1875em; // 19px with a 16px basis
$small: 0.6875em; // 11px with a 16px basis
$small-size: 1.7273em; // 19px with a 11px basis
.form-check {
	line-height: $size;
	padding-left: $size;
	margin-top: 0.5625em;
	margin-bottom: 0.5626em;

	&.form-check-lg {
		font-size: 1.25em;
	}

	&.form-check-sm {
		font-size: 0.875rem;
	}

	.form-check-label {
		vertical-align: middle;
		position: relative;
		min-height: $size;
		padding-left: 0.3em;
		font-weight: normal;
		cursor: pointer;

		&:empty {
			padding-left: 0;
		}

		&::before,
		&::after {
			content: "";
			display: block;
			position: absolute;
			top: 0;
			left: 0;
		}

		&::before {
			width: $size;
			height: $size;
			margin-left: -$size;
			border: 1px solid ob-bootstrap-variables.$ob-input-border-color;
			background-color: core-variables.$ob-white;
			transition-property: border-radius, color;
			transition-timing-function: ease-in-out;
			transition-duration: core-variables.$ob-duration-fast;
		}

		&::after {
			width: $small-size;
			height: $small-size;
			margin-left: -$small-size;
			color: ob-bootstrap-variables.$ob-input-color;
			font-size: $small;
			text-align: center;
			line-height: $small-size;
			vertical-align: middle;
			transform: scale(0, 0);
			transition: transform 0.15s cubic-bezier(0.8, -0.33, 0.2, 1.33);
			// curve - http://cubic-bezier.com/#.8,-0.33,.2,1.33
		}
	}

	.form-check-input {
		opacity: 0;
		margin: 0;
		z-index: -1;

		&:checked + .form-check-label::after {
			transform: scale(1, 1);
		}

		&:focus + .form-check-label::before {
			color: $input-focus-color;
			background-color: $input-focus-bg;
			border-color: $input-focus-border-color;
			outline: 0;
			// Avoid using mixin so we can pass custom focus shadow properly
			@if $enable-shadows {
				box-shadow: $input-box-shadow, $input-focus-box-shadow;
			} @else {
				box-shadow: $input-focus-box-shadow;
			}
		}

		&:disabled,
		fieldset:disabled & {
			cursor: not-allowed;

			+ .form-check-label {
				cursor: default;
				opacity: 0.65;

				&::before {
					background-color: core-variables.$ob-gray-extra-light;
				}

				&::before,
				&::after {
					cursor: not-allowed;
				}
			}
		}
	}

	.form-inline & {
		padding-left: $size;
	}

	&.form-check-inline {
		display: inline-block;

		&:last-of-type {
			margin-right: 0;
		}

		.form-check-input {
			position: absolute;
		}
	}

	.form-check-input[type="checkbox"] {
		& + .form-check-label::before {
			border-radius: 3px;
		}

		&:checked + .form-check-label::after {
			font-family: core-variables.$ob-icon-font-family;
			font-weight: 900;
			content: scss-variables.fa-content(scss-variables.$fa-var-check);
		}
	}

	.form-check-input[type="radio"] {
		& + .form-check-label::before,
		& + .form-check-label::after {
			border-radius: 50%;
		}

		&:checked + .form-check-label::after {
			$outer: 1.18182em; // 13px with a 16px basis
			$inner: 0.27273em; // 3px with a 16px basis
			width: $outer;
			height: $outer;
			left: $inner;
			top: $inner;
			background-color: ob-bootstrap-variables.$ob-input-color;
		}
	}

	&.form-check-primary {
		@include form-check.ob-checkbox-variant(core-variables.$ob-primary);
		@include form-check.ob-radio-variant(core-variables.$ob-primary);
	}

	&.form-check-success {
		@include form-check.ob-checkbox-variant(core-variables.$ob-success);
		@include form-check.ob-radio-variant(core-variables.$ob-success);
	}

	&.form-check-warning {
		@include form-check.ob-checkbox-variant(core-variables.$ob-warning);
		@include form-check.ob-radio-variant(core-variables.$ob-warning);
	}

	&.form-check-danger {
		@include form-check.ob-checkbox-variant(core-variables.$ob-error);
		@include form-check.ob-radio-variant(core-variables.$ob-error);
	}
}
